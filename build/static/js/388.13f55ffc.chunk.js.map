{"version":3,"file":"static/js/388.13f55ffc.chunk.js","mappings":"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","sources":["../node_modules/@capacitor-community/sqlite/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  CapacitorSQLitePlugin,\n  capConnectionOptions,\n  capAllConnectionsOptions,\n  capChangeSecretOptions,\n  capEchoOptions,\n  capEchoResult,\n  capNCConnectionOptions,\n  capNCDatabasePathOptions,\n  capNCDatabasePathResult,\n  capNCOptions,\n  capSetSecretOptions,\n  capSQLiteChanges,\n  capSQLiteExecuteOptions,\n  capSQLiteExportOptions,\n  capSQLiteFromAssetsOptions,\n  capSQLiteHTTPOptions,\n  capSQLiteLocalDiskOptions,\n  capSQLiteImportOptions,\n  capSQLiteJson,\n  capSQLiteOptions,\n  capSQLitePathOptions,\n  capSQLiteQueryOptions,\n  capSQLiteResult,\n  capSQLiteRunOptions,\n  capSQLiteSetOptions,\n  capSQLiteSyncDate,\n  capSQLiteSyncDateOptions,\n  capSQLiteTableOptions,\n  capSQLiteUpgradeOptions,\n  capSQLiteUrl,\n  capSQLiteValues,\n  capVersionResult,\n  capSQLiteExtensionPath,\n  capSQLiteExtensionEnable,\n} from './definitions';\n\nexport class CapacitorSQLiteWeb extends WebPlugin implements CapacitorSQLitePlugin {\n  private jeepSqliteElement: any = null;\n  private isWebStoreOpen = false;\n\n  async initWebStore(): Promise<void> {\n    await customElements.whenDefined('jeep-sqlite');\n\n    this.jeepSqliteElement = document.querySelector('jeep-sqlite');\n    this.ensureJeepSqliteIsAvailable();\n\n    this.jeepSqliteElement.addEventListener('jeepSqliteImportProgress', (event: CustomEvent) => {\n      this.notifyListeners('sqliteImportProgressEvent', event.detail);\n    });\n    this.jeepSqliteElement.addEventListener('jeepSqliteExportProgress', (event: CustomEvent) => {\n      this.notifyListeners('sqliteExportProgressEvent', event.detail);\n    });\n    this.jeepSqliteElement.addEventListener('jeepSqliteHTTPRequestEnded', (event: CustomEvent) => {\n      this.notifyListeners('sqliteHTTPRequestEndedEvent', event.detail);\n    });\n    this.jeepSqliteElement.addEventListener('jeepSqlitePickDatabaseEnded', (event: CustomEvent) => {\n      this.notifyListeners('sqlitePickDatabaseEndedEvent', event.detail);\n    });\n    this.jeepSqliteElement.addEventListener('jeepSqliteSaveDatabaseToDisk', (event: CustomEvent) => {\n      this.notifyListeners('sqliteSaveDatabaseToDiskEvent', event.detail);\n    });\n\n    if (!this.isWebStoreOpen) {\n      this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n    }\n\n    return;\n  }\n\n  async saveToStore(options: capSQLiteOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.saveToStore(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async getFromLocalDiskToStore(options: capSQLiteLocalDiskOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.getFromLocalDiskToStore(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async saveToLocalDisk(options: capSQLiteOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.saveToLocalDisk(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async echo(options: capEchoOptions): Promise<capEchoResult> {\n    this.ensureJeepSqliteIsAvailable();\n\n    const echoResult = await this.jeepSqliteElement.echo(options);\n    return echoResult;\n  }\n\n  async createConnection(options: capConnectionOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.createConnection(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async open(options: capSQLiteOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.open(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async closeConnection(options: capSQLiteOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.closeConnection(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async getVersion(options: capSQLiteOptions): Promise<capVersionResult> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const versionResult: capVersionResult = await this.jeepSqliteElement.getVersion(options);\n      return versionResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async checkConnectionsConsistency(options: capAllConnectionsOptions): Promise<capSQLiteResult> {\n    this.ensureJeepSqliteIsAvailable();\n\n    try {\n      const consistencyResult: capSQLiteResult = await this.jeepSqliteElement.checkConnectionsConsistency(options);\n      return consistencyResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async close(options: capSQLiteOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.close(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async beginTransaction(options: capSQLiteOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const changes: capSQLiteChanges = await this.jeepSqliteElement.beginTransaction(options);\n      return changes;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async commitTransaction(options: capSQLiteOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const changes: capSQLiteChanges = await this.jeepSqliteElement.commitTransaction(options);\n      return changes;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async rollbackTransaction(options: capSQLiteOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const changes: capSQLiteChanges = await this.jeepSqliteElement.rollbackTransaction(options);\n      return changes;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async isTransactionActive(options: capSQLiteOptions): Promise<capSQLiteResult> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const result: capSQLiteResult = await this.jeepSqliteElement.isTransactionActive(options);\n      return result;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async getTableList(options: capSQLiteOptions): Promise<capSQLiteValues> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const tableListResult: capSQLiteValues = await this.jeepSqliteElement.getTableList(options);\n      return tableListResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async execute(options: capSQLiteExecuteOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const executeResult: capSQLiteChanges = await this.jeepSqliteElement.execute(options);\n      return executeResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async executeSet(options: capSQLiteSetOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const executeResult: capSQLiteChanges = await this.jeepSqliteElement.executeSet(options);\n      return executeResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async run(options: capSQLiteRunOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const runResult: capSQLiteChanges = await this.jeepSqliteElement.run(options);\n      return runResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async query(options: capSQLiteQueryOptions): Promise<capSQLiteValues> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const queryResult: capSQLiteValues = await this.jeepSqliteElement.query(options);\n      return queryResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async isDBExists(options: capSQLiteOptions): Promise<capSQLiteResult> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const dbExistsResult: capSQLiteResult = await this.jeepSqliteElement.isDBExists(options);\n      return dbExistsResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async isDBOpen(options: capSQLiteOptions): Promise<capSQLiteResult> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const isDBOpenResult: capSQLiteResult = await this.jeepSqliteElement.isDBOpen(options);\n      return isDBOpenResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async isDatabase(options: capSQLiteOptions): Promise<capSQLiteResult> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const isDatabaseResult: capSQLiteResult = await this.jeepSqliteElement.isDatabase(options);\n      return isDatabaseResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async isTableExists(options: capSQLiteTableOptions): Promise<capSQLiteResult> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const tableExistsResult = await this.jeepSqliteElement.isTableExists(options);\n      return tableExistsResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async deleteDatabase(options: capSQLiteOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.deleteDatabase(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async isJsonValid(options: capSQLiteImportOptions): Promise<capSQLiteResult> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const isJsonValidResult = await this.jeepSqliteElement.isJsonValid(options);\n      return isJsonValidResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async importFromJson(options: capSQLiteImportOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const importFromJsonResult: capSQLiteChanges = await this.jeepSqliteElement.importFromJson(options);\n      return importFromJsonResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async exportToJson(options: capSQLiteExportOptions): Promise<capSQLiteJson> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const exportToJsonResult: capSQLiteJson = await this.jeepSqliteElement.exportToJson(options);\n      return exportToJsonResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async createSyncTable(options: capSQLiteOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const createSyncTableResult: capSQLiteChanges = await this.jeepSqliteElement.createSyncTable(options);\n      return createSyncTableResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async setSyncDate(options: capSQLiteSyncDateOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.setSyncDate(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async getSyncDate(options: capSQLiteOptions): Promise<capSQLiteSyncDate> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const getSyncDateResult: capSQLiteSyncDate = await this.jeepSqliteElement.getSyncDate(options);\n      return getSyncDateResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async deleteExportedRows(options: capSQLiteOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.deleteExportedRows(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async addUpgradeStatement(options: capSQLiteUpgradeOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.addUpgradeStatement(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async copyFromAssets(options: capSQLiteFromAssetsOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.copyFromAssets(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async getFromHTTPRequest(options: capSQLiteHTTPOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.getFromHTTPRequest(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async getDatabaseList(): Promise<capSQLiteValues> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const databaseListResult: capSQLiteValues = await this.jeepSqliteElement.getDatabaseList();\n      return databaseListResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  /**\n   * Checks if the `jeep-sqlite` element is present in the DOM.\n   * If it's not in the DOM, this method throws an Error.\n   *\n   * Attention: This will always fail, if the `intWebStore()` method wasn't called before.\n   */\n  private ensureJeepSqliteIsAvailable() {\n    if (this.jeepSqliteElement === null) {\n      throw new Error(\n        `The jeep-sqlite element is not present in the DOM! Please check the @capacitor-community/sqlite documentation for instructions regarding the web platform.`\n      );\n    }\n  }\n\n  private ensureWebstoreIsOpen() {\n    if (!this.isWebStoreOpen) {\n      /**\n       * if (!this.isWebStoreOpen)\n        this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n       */\n      throw new Error('WebStore is not open yet. You have to call \"initWebStore()\" first.');\n    }\n  }\n\n  ////////////////////////////////////\n  ////// UNIMPLEMENTED METHODS\n  ////////////////////////////////////\n\n  async getUrl(): Promise<capSQLiteUrl> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async getMigratableDbList(options: capSQLitePathOptions): Promise<capSQLiteValues> {\n    console.log('getMigratableDbList', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async addSQLiteSuffix(options: capSQLitePathOptions): Promise<void> {\n    console.log('addSQLiteSuffix', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async deleteOldDatabases(options: capSQLitePathOptions): Promise<void> {\n    console.log('deleteOldDatabases', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async moveDatabasesAndAddSuffix(options: capSQLitePathOptions): Promise<void> {\n    console.log('moveDatabasesAndAddSuffix', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async isSecretStored(): Promise<capSQLiteResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async setEncryptionSecret(options: capSetSecretOptions): Promise<void> {\n    console.log('setEncryptionSecret', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async changeEncryptionSecret(options: capChangeSecretOptions): Promise<void> {\n    console.log('changeEncryptionSecret', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async clearEncryptionSecret(): Promise<void> {\n    console.log('clearEncryptionSecret');\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async checkEncryptionSecret(options: capSetSecretOptions): Promise<capSQLiteResult> {\n    console.log('checkEncryptionPassPhrase', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async getNCDatabasePath(options: capNCDatabasePathOptions): Promise<capNCDatabasePathResult> {\n    console.log('getNCDatabasePath', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async createNCConnection(options: capNCConnectionOptions): Promise<void> {\n    console.log('createNCConnection', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async closeNCConnection(options: capNCOptions): Promise<void> {\n    console.log('closeNCConnection', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async isNCDatabase(options: capNCOptions): Promise<capSQLiteResult> {\n    console.log('isNCDatabase', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async isDatabaseEncrypted(options: capSQLiteOptions): Promise<capSQLiteResult> {\n    console.log('isDatabaseEncrypted', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async isInConfigEncryption(): Promise<capSQLiteResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async isInConfigBiometricAuth(): Promise<capSQLiteResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async loadExtension(options: capSQLiteExtensionPath): Promise<void> {\n    console.log('loadExtension', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async enableLoadExtension(options: capSQLiteExtensionEnable): Promise<void> {\n    console.log('enableLoadExtension', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n}\n"],"names":["CapacitorSQLiteWeb","WebPlugin","constructor","jeepSqliteElement","isWebStoreOpen","initWebStore","customElements","whenDefined","this","document","querySelector","ensureJeepSqliteIsAvailable","addEventListener","event","notifyListeners","detail","isStoreOpen","saveToStore","options","ensureWebstoreIsOpen","err","Error","concat","getFromLocalDiskToStore","saveToLocalDisk","echo","createConnection","open","closeConnection","getVersion","checkConnectionsConsistency","close","beginTransaction","commitTransaction","rollbackTransaction","isTransactionActive","getTableList","execute","executeSet","run","query","isDBExists","isDBOpen","isDatabase","isTableExists","deleteDatabase","isJsonValid","importFromJson","exportToJson","createSyncTable","setSyncDate","getSyncDate","deleteExportedRows","addUpgradeStatement","copyFromAssets","getFromHTTPRequest","getDatabaseList","getUrl","unimplemented","getMigratableDbList","console","log","addSQLiteSuffix","deleteOldDatabases","moveDatabasesAndAddSuffix","isSecretStored","setEncryptionSecret","changeEncryptionSecret","clearEncryptionSecret","checkEncryptionSecret","getNCDatabasePath","createNCConnection","closeNCConnection","isNCDatabase","isDatabaseEncrypted","isInConfigEncryption","isInConfigBiometricAuth","loadExtension","enableLoadExtension"],"sourceRoot":""}